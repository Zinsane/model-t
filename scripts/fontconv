import os
import sys
import ast
import math
import pygame
import pygame.freetype
import pygame.image
import pystache

h_template = """
#ifndef __FONT_RESOURCES_H__
#define __FONT_RESOURCES_H__

#include <stdint.h>

typedef struct {
  uint8_t width;
  uint8_t height;
  int8_t xoffset;
  int8_t yoffset;
  uint8_t advance;
  const uint8_t* data;
} glyph_t;

typedef struct {
  uint8_t line_height;
  uint8_t ascender;
  const glyph_t* glyphs[256];
} font_t;

{{#fonts}}
extern const font_t* font_{{font_name}}_{{font_size}};
{{/fonts}}

#endif
"""

c_template = """
#include "font_resources.h"

{{#fonts}}
{{#glyphs}}
static const uint8_t glyph_{{font_name}}_{{font_size}}_{{glyph_id}}_data[] = {
  {{#glyph_data}}{{.}}, {{/glyph_data}}
};

static const glyph_t glyph_{{font_name}}_{{font_size}}_{{glyph_id}} = {
  .width = {{width}},
  .height = {{height}},
  .xoffset = {{xoffset}},
  .yoffset = {{yoffset}},
  .advance = {{advance}},
  .data = glyph_{{font_name}}_{{font_size}}_{{glyph_id}}_data,
};

{{/glyphs}}
static const font_t _font_{{font_name}}_{{font_size}} = {
  .line_height = {{line_height}},
  .ascender = {{ascender}},
  .glyphs = {
    [0] = &glyph_{{font_name}}_{{font_size}}_63,
{{#glyphs}}
    [{{glyph_id}}] = &glyph_{{font_name}}_{{font_size}}_{{glyph_id}},
{{/glyphs}}
  },
};

const font_t* font_{{font_name}}_{{font_size}} = &_font_{{font_name}}_{{font_size}};

{{/fonts}}
"""

WHITE = pygame.Color('white')

def parse_font(font_file, font_size, charspec):
  font = pygame.freetype.Font(font_file, font_size)
  font_name = os.path.basename(os.path.splitext(font_file)[0]).lower().replace('-', '_')
  
  glyph_ords = set(o for o in (expand_charspec(charspec) + [ ord('?') ]))
  
  glyphs = []
  for glyph_ord in glyph_ords:
    glyph_chr = unichr(glyph_ord)
    (minx, maxx, miny, maxy, advancex, advancey) = font.get_metrics(glyph_chr)[0]
    
    glyph_data, glyph_dimensions = font.render_raw(glyph_chr)
    
    glyph_spec = {
      "glyph_id": glyph_ord,
      "width": glyph_dimensions[0],
      "height": glyph_dimensions[1],
      "xoffset": minx,
      "yoffset": font.get_sized_ascender() - maxy, # distance from ascent line to top of glyph
      "advance": int(math.ceil(advancex)),
      "glyph_data": bytearray(glyph_data)
    }
    glyphs.append(glyph_spec)

  return {
    "font_name": font_name,
    "font_size": font_size,
    "line_height": font.get_sized_ascender() - font.get_sized_descender(),
    "ascender": font.get_sized_ascender(),
    "glyphs": glyphs
  }

def expand_charspec(charspecs):
  char_classes = {
    "alpha": range(65, 91) + range(97, 123),
    "numeric": range(48, 58),
    "alphanumeric": range(48, 58) + range(65, 91) + range(97, 123),
    "symbols": range(33, 48) + range(58, 65) + range(91, 97) + range(123, 127),
    "space": [32],
    "degree": [176],
    "all": range(32, 127)
  }
  
  ords = []
  for charspec in charspecs.split(';'):
    if charspec in char_classes:
      ords = ords + char_classes[charspec]
    else:
      ords = ords + [ord(c) for c in charspec]
  return ords

# expected command line format:
#    fontconv <font_dir> <output_dir>
#    
#    font_dir must contain a file named font_specs and contain a python list
#    specifying the fonts, sizes, and character sets to generate. For example:
#
# [
#   {
#     "font_file": "OpenSans-Regular.ttf",
#     "font_size": 8,
#     "charspec": "all"
#   },
#   {
#     "font_file": "OpenSans-Regular.ttf",
#     "font_size": 16,
#     "charspec": "all"
#   }
# ]
if __name__ == "__main__":
  pygame.init()
  
  font_dir = sys.argv[1]
  out_dir = os.path.abspath(sys.argv[2])
  
  os.chdir(font_dir)
  
  with open('font_specs', 'r') as f:
    font_specs = ast.literal_eval(f.read())
    
  context = {
    "fonts": [ parse_font(**font_spec) for font_spec in font_specs ]
  }

  with open(os.path.join(out_dir, 'font_resources.h'), 'w+') as f:
    f.write(pystache.render(h_template, context))
    
  with open(os.path.join(out_dir, 'font_resources.c'), 'w+') as f:
    f.write(pystache.render(c_template, context))
    