import os
import sys
import glob
import Image
import pystache

h_template = """
#ifndef __IMAGE_RESOURCES_H__
#define __IMAGE_RESOURCES_H__

#include <stdlib.h>
#include <stdint.h>

typedef struct {
  const uint16_t width;
  const uint16_t height;
  const uint16_t* px;
  const uint8_t* alpha;
} Image_t;

{{#images}}
extern const Image_t* img_{{image_name}};
{{/images}}

#endif
"""

c_template = """
#include "image_resources.h"

{{#images}}
{{#px?}}
static const uint16_t img_{{image_name}}_px[] = {
  {{#image_px}}{{.}}, {{/image_px}}
};

{{/px?}}
{{#alpha?}}
static const uint8_t img_{{image_name}}_alpha[] = {
  {{#image_alpha}}{{.}}, {{/image_alpha}}
};

{{/alpha?}}
static const Image_t _img_{{image_name}} = {
  .width = {{image_width}},
  .height = {{image_height}},
{{#px?}}
  .px = img_{{image_name}}_px,
{{/px?}}
{{^px?}}
  .px = NULL,
{{/px?}}
{{#alpha?}}
  .alpha = img_{{image_name}}_alpha,
{{/alpha?}}
{{^alpha?}}
  .alpha = NULL,
{{/alpha?}}
};

const Image_t* img_{{image_name}} = &_img_{{image_name}};

{{/images}}
"""

def rescale_color_comp(p, bits):
  return int(p * ((2**bits) - 1) / 255)

def rescale_px(p):
  return (rescale_color_comp(p[0], 5) << 11) + \
         (rescale_color_comp(p[1], 6) << 5) + \
          rescale_color_comp(p[2], 5)

def parse_img(in_file):
  in_file_base = os.path.splitext(os.path.basename(in_file))[0]
  
  if in_file_base.endswith('.rgba'):
    has_px = True
    has_alpha = True
  elif in_file_base.endswith('.a'):
    has_px = False
    has_alpha = True
  else:
    has_px = True
    has_alpha = False
    
  im = Image.open(in_file)
  ctx = {
    "image_name": os.path.splitext(in_file_base)[0],
    "image_width": im.size[0],
    "image_height": im.size[1],
    "px?": has_px,
    "alpha?": has_alpha
  }
	
  imdata = im.getdata()
  if has_px:
    ctx["image_px"] = [rescale_px(p) for p in imdata]
  
  if has_alpha:
    ctx["image_alpha"] = [p[3] for p in imdata]
	
  return ctx

if __name__ == "__main__":
  img_files = []
  for arg in sys.argv[1:]:
    for f in glob.glob(arg):
      img_files.append(f)
      
  context = {
    "images": [ parse_img(img_file) for img_file in img_files ]
  }
  
  with open('build/app_mt/autogen/image_resources.h', 'w+') as f:
    f.write(pystache.render(h_template, context))
    
  with open('build/app_mt/autogen/image_resources.c', 'w+') as f:
    f.write(pystache.render(c_template, context))
  